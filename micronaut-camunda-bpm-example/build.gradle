plugins {
    id("com.github.johnrengelman.shadow")
    id("io.micronaut.application")
}

group = "info.novatec"

micronaut {
    runtime("jetty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("micronaut.camunda.bpm.example.*")
    }
}

dependencies {
    implementation(project(":micronaut-camunda-bpm-feature"))
    runtimeOnly("com.h2database:h2")
    runtimeOnly("ch.qos.logback:logback-classic")

    // Test
    testImplementation("io.micronaut:micronaut-http-client")
    // REST API REQUIREMENT
    implementation("com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$jacksonVersion")

    // REST API
    implementation("org.camunda.bpm:camunda-engine-rest:$camundaVersion")

    //Camunda Webapps
    implementation("org.camunda.bpm.webapp:camunda-webapp:$camundaVersion")
    implementation("org.camunda.bpm.webapp:camunda-webapp-webjar:$camundaVersion")

    // JERSEY
    implementation("org.glassfish.jersey.inject:jersey-hk2:$jerseyVersion")
    implementation("org.glassfish.jersey.containers:jersey-container-servlet-core:$jerseyVersion")
    implementation("org.glassfish.jersey.containers:jersey-container-servlet:$jerseyVersion")

    // Micronaut Servlet Dependency for Jetty
    implementation("io.micronaut.servlet:micronaut-http-server-jetty:$mnServletJettyVersion")

    // Additional needed Jetty Dependencies
    implementation("org.eclipse.jetty:jetty-server:$jettyVersion")
    implementation("org.eclipse.jetty:jetty-servlet:$jettyVersion")

}
application {
    mainClass.set("info.novatec.micronaut.camunda.bpm.example.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("1.8")
    targetCompatibility = JavaVersion.toVersion("1.8")
}

tasks {

}

