plugins {
    id "application"
    id "maven-publish"
    id "signing"
}

group "info.novatec"

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

dependencies {
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut:micronaut-cli"
    implementation "org.camunda.bpm:camunda-engine:7.12.0"
    testImplementation "com.h2database:h2:1.4.200"
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}

test.classpath += configurations.developmentOnly

mainClassName = "info.novatec.micronaut.camunda.example.Application"
// use JUnit 5 platform
test {
    useJUnitPlatform()
}
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
}

java {
    withJavadocJar()
    withSourcesJar()
}

// based on https://docs.gradle.org/current/userguide/publishing_maven.html#sec:modifying_the_generated_pom and https://central.sonatype.org/pages/requirements.html#sufficient-metadata
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'micronaut-camunda-bpm-feature'
                description = 'Integration between Micronaut and Camunda BPM Process Engine'
                url = 'https://github.com/NovatecConsulting/micronaut-camunda-bpm'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name = 'The micronaut-camunda-bpm Team at Novatec Consulting GmbH'
                        email = 'micronaut-camunda@novatec-gmbh.de'
                        organization = 'Novatec Consulting GmbH'
                        organizationUrl = 'https://www.novatec-gmbh.de'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/NovatecConsulting/micronaut-camunda-bpm.git'
                    developerConnection = 'scm:git:https://github.com/NovatecConsulting/micronaut-camunda-bpm.git'
                    url = 'https://github.com/NovatecConsulting/micronaut-camunda-bpm'
                }
            }
        }
    }
    repositories {
        maven {
            url = version.endsWith('SNAPSHOT') ? 'https://oss.sonatype.org/content/repositories/snapshots/' : 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            credentials {
                username 'micronaut-camunda'
                password "$System.env.OSSRH_PWD"
            }
        }
    }
}

// see https://docs.gradle.org/current/userguide/signing_plugin.html#sec:specifying_what_to_sign
signing {
    sign publishing.publications.mavenJava
}

// based on https://docs.gradle.org/current/userguide/signing_plugin.html#sec:signatory_credentials
gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        def signingKeyId = findProperty("signingKeyId")
        def secretKeyRingFile = findProperty("secretKeyRingFile")
        System.console().printf "Signing with key $signingKeyId and secretKeyRingFile $secretKeyRingFile\n"

        allprojects {
            ext."signing.keyId" = signingKeyId
            ext."signing.secretKeyRingFile" = secretKeyRingFile
            ext."signing.password" = findProperty("signingPassword")
        }
    }
}
